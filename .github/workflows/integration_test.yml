name: Integration Tests

on:
  issue_comment:
    types: [created]

jobs:
  check-authorization:
    name: Check Authorization
    if: >-
      startsWith(github.event.comment.body, '/run-integration-tests') && 
      contains(toJSON(github.event.issue), 'pull_request')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
    outputs:
      is_authorized: ${{ steps.auth-check.outputs.is_authorized }}
      pr_number: ${{ github.event.issue.number }}
      
    steps:
      - uses: actions/checkout@v5
        with:
          ref: 'main'
      
      - name: Check CODEOWNERS authorization
        id: auth-check
        uses: actions/github-script@v7
        with:
          script: |
            const commenter = context.payload.comment.user.login;
            console.log(`Comment by: ${commenter}`);

            // Verify this is a pull request comment
            if (!context.payload.issue.pull_request) {
              console.log('This comment is not on a pull request. Skipping.');
              core.setOutput("is_authorized", "false");
              return;
            }
            
            try {

              console.log(`Trying to get .github/CODEOWNERS from ${context.repo.owner}/${context.repo.repo}`);
              const { data: codeownersFile } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '.github/CODEOWNERS',
              });
              console.log("CODEOWNERS file found!");

              // Get CODEOWNERS file
              const { data: codeownersFile } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: '.github/CODEOWNERS',
              });
              
              // Decode content from base64
              const content = Buffer.from(codeownersFile.content, 'base64')
                .toString('utf8');
              
              // Parse CODEOWNERS file
              const lines = content.split('\n')
                .filter(line => line.trim() && !line.startsWith('#'));
              
              // Extract owners
              const owners = new Set();
              for (const line of lines) {
                const matches = line.match(/@[\w-]+(?:\/[\w-]+)?/g) || [];
                for (const match of matches) {
                  owners.add(match.substring(1)); 
                }
              }
              
              // Check if commenter is in CODEOWNERS
              const isAuthorized = 
                owners.has(commenter) || 
                Array.from(owners).some(owner => 
                  owner.includes('/') && 
                  owner.startsWith(context.repo.owner + '/')
                );
              
              core.setOutput("is_authorized", isAuthorized ? "true" : "false");
              console.log(`Authorization result: ${isAuthorized}`);
              
            } catch (error) {
              console.error(`Error processing CODEOWNERS: ${error.message}`);
              core.setOutput("is_authorized", "false");
            }

  integration-tests:
    name: Run Integration Tests
    needs: check-authorization
    if: needs.check-authorization.outputs.is_authorized == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    env:
      # Chronicle config variables
      CHRONICLE_CUSTOMER_ID: ${{ secrets.CHRONICLE_CUSTOMER_ID }}
      CHRONICLE_PROJECT_NUMBER: ${{ secrets.CHRONICLE_PROJECT_NUMBER }}
      CHRONICLE_REGION: ${{ vars.CHRONICLE_REGION }}
      
      # Service account variables
      CHRONICLE_PROJECT_NAME: ${{ secrets.CHRONICLE_PROJECT_NAME }}
      CHRONICLE_PRIVATE_KEY_ID: ${{ secrets.CHRONICLE_PRIVATE_KEY_ID }}
      CHRONICLE_PRIVATE_KEY: ${{ secrets.CHRONICLE_PRIVATE_KEY }}
      CHRONICLE_CLIENT_EMAIL: ${{ secrets.CHRONICLE_CLIENT_EMAIL }}
      CHRONICLE_CLIENT_ID: ${{ secrets.CHRONICLE_CLIENT_ID }}
      CHRONICLE_AUTH_URI: ${{ vars.CHRONICLE_AUTH_URI }}
      CHRONICLE_TOKEN_URI: ${{ vars.CHRONICLE_TOKEN_URI }}
      CHRONICLE_AUTH_PROVIDER_CERT_URL: ${{ vars.CHRONICLE_AUTH_PROVIDER_CERT_URL }}
      CHRONICLE_CLIENT_X509_CERT_URL: ${{ secrets.CHRONICLE_CLIENT_X509_CERT_URL }}
      CHRONICLE_UNIVERSE_DOMAIN: ${{ vars.CHRONICLE_UNIVERSE_DOMAIN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
          pip install pytest pytest-cov python-dotenv

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_JSON }}
  
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          python -m pytest tests/ -m "integration" -v